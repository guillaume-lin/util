# ticket on domain visit

defmodule VistorManagement.Visit.Ticket do
  # This turns this module into a resource
  use Ash.Resource, domain: VistorManagement.Visit, data_layer: AshPostgres.DataLayer

  postgres do
    table "tickets"
    repo VistorManagement.Repo
  end

  actions do
    # Use the default implementation of the :read action
    defaults [:read]

    # and a create action, which we'll customize later
    create :create do
      accept [:status, :name, :phone, :uid, :visit_reason, :visit_start_date, :visit_end_date]
    end

    update :approve do
      accept [:status]
      change set_attribute(:status, :approved)
    end
    update :close do
      accept [:status]
      change set_attribute(:status, :closed)
    end
  end

  # Attributes are the simple pieces of data that exist on your resource
  attributes do
    # Add an autogenerated UUID primary key called `:id`.
    uuid_primary_key :id

    # which user create this ticket 
    attribute :uid,  :string do 
      allow_nil? false
      public? true
    end

    # Add a string type attribute called `:phone`
    attribute :phone, :string do
      allow_nil? false
      public? true
    end

    attribute :name, :string do
      allow_nil? false
      public? true
    end

    attribute :resident_id, :string

    attribute :visit_start_date, :datetime do
      allow_nil? false
      public? true
    end
    
    attribute :visit_end_date, :datetime do 
      allow_nil? false
      public? true
    end

    attribute :follower, :integer do 
      allow_nil? false
      public? true
      default 0
    end
    attribute :visit_reason, :string do
      allow_nil? false
      public? true
    end 
    attribute :status, :atom do
      constraints one_of: [:applied, :approved, :rejected, :closed ]
      default :applied
      allow_nil? false
    end

    attribute :approve_date, :datetime
    attribute :create_date, :datetime
    attribute :update_date, :datetime
  end
end
